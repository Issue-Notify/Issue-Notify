generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String           @id @default(cuid())
    name              String?
    email             String?          @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    ownerRepository   OwnerRepository? @relation(fields: [ownerRepositoryId], references: [id])
    ownerRepositoryId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Owner {
    id              String            @id @default(cuid())
    name            String            @unique
    repositories    Repository[]      @relation("OwnerRepository")
    ownerRepository OwnerRepository[]
}

model Repository {
    id              String            @id @default(cuid())
    name            String            @unique
    owners          Owner[]           @relation("OwnerRepository")
    ownerRepository OwnerRepository[]
}

model OwnerRepository {
    id           String     @id @default(cuid())
    owner        Owner      @relation(fields: [ownerId], references: [id])
    repository   Repository @relation(fields: [repositoryId], references: [id])
    ownerId      String
    repositoryId String
    users        User[]
}
